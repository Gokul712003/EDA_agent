from langchain_experimental.tools import PythonREPLTool
from pydantic import BaseModel,Field
from typing import List,Dict,Optional
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_experimental.tools import PythonREPLTool
from langchain.tools import tool
from langchain.agents import AgentExecutor,create_tool_calling_agent
from langchain.prompts import ChatPromptTemplate,MessagesPlaceholder
from dotenv import load_dotenv

load_dotenv()

class Description(BaseModel):
    column_names: Optional[List[str]] = Field(default=None, description="List of column names")
    column_data_types: Optional[List[str]] = Field(default=None)

model = ChatGoogleGenerativeAI(model='gemini-2.0-flash',temperature=0.5)

import os
temp_dir_path = os.path.join(os.getcwd(), 'tmp')
python_repl = PythonREPLTool()

@tool
def python_plot_tool_function(code: str):
    """Executes Python code in a REPL environment.

    Use this tool to run Python code for tasks like data manipulation (pandas, numpy),
    calculations (scipy), machine learning (sklearn), and plotting (matplotlib, seaborn).

    IMPORTANT FOR PLOTTING:
    - Always save plots to files instead of displaying them (e.g., use plt.savefig() instead of plt.show()).
    - Save the plot images to the directory: '{d:\\PROJECT_MULTIMODEL\\Pydantic_ai\\eda_project\\tmp}'
    - Make sure your code includes creating the directory if it doesn't exist (although it should be pre-created).
    - Inform the user after the plot has been saved, mentioning the filename and directory.

    Args:
        code (str): The Python code snippet to execute.

    Returns:
        str: The standard output or standard error generated by executing the code.
    """
    # You might want to add safety checks here if needed
    print(f"\n--- Executing Code ---\n{code}\n----------------------")
    try:
        result = python_repl.run(code)
        print(f"\n--- Code Result ---\n{result}\n--------------------")
        return result
    except Exception as e:
        print(f"\n--- Code Error ---\n{e}\n--------------------")
        return f"Error executing code: {e}"

@tool
def python_data_exploration_tool(code: str):
    """Executes Python code focused on data exploration and column analysis.
    
    Use this tool specifically for exploring dataset metadata, column information, 
    and basic statistics without visualization. Ideal for:
    
    - Identifying and listing available columns in a dataset
    - Counting unique values in columns
    - Generating descriptive statistics (min, max, mean, median, etc.)
    - Checking for missing values
    - Analyzing data types of columns
    - Examining value distributions through counts or frequency analysis
    - Getting shape, size and general dataset information
    
    DO NOT use this tool for:
    - Creating visualizations or plots
    - Performing complex data transformations
    - Running machine learning models
    
    - directory of the csv file is always d:\\PROJECT_MULTIMODEL\\Pydantic_ai\\eda_project\\tmp\\*.csv
    Args:
        code (str): The Python code snippet to execute (typically using pandas).
        
    Returns:
        str: Statistical information and column metadata from the dataset.
    """
    print(f"\n--- Executing Data Exploration Code ---\n{code}\n----------------------")
    try:
        result = python_repl.run(code)
        print(f"\n--- Data Exploration Result ---\n{result}\n--------------------")
        return result
    except Exception as e:
        print(f"\n--- Data Exploration Error ---\n{e}\n--------------------")
        return f"Error executing data exploration code: {e}"
    
SYSTEM_PROMPT = f"""You are a helpful AI assistant specialized in Exploratory Data Analysis (EDA) using Python.

You have access to TWO specialized Python tools:
1. `python_plot_tool_function`: For creating and saving visualizations
2. `python_data_exploration_tool`: For analyzing data structure, columns, and statistics without visualization

Given a data schema, you can both analyze and visualize the data to provide comprehensive insights.

WHEN TO USE EACH TOOL:
- Use `python_data_exploration_tool` for:
  * Identifying available columns and their data types
  * Calculating descriptive statistics (count, mean, min, max, etc.)
  * Finding null values and unique value counts
  * Examining data distribution characteristics
  * General dataset information (shape, size, etc.)

- Use `python_plot_tool_function` for:
  * Creating any type of visualization (bar charts, histograms, scatter plots, etc.)
  * Comparing variables visually
  * Examining distributions through plots
  * Visualizing correlations or relationships

Instructions:
- Use appropriate libraries: pandas, numpy, scipy, sklearn, matplotlib, seaborn.
- **VERY IMPORTANT FOR PLOTTING:**
    - When creating plots, you MUST use the `python_plot_tool_function` tool.
    - The Python code MUST save plots to files using `matplotlib.pyplot.savefig()` or similar.
    - **Do NOT use `matplotlib.pyplot.show()` or try to display plots directly.**
    - **Save all plot image files inside the directory: '{temp_dir_path}'.**
    - Generate unique and descriptive filenames (e.g., 'variable_distribution.png').
    - After successful plot creation, inform the user that the plot has been saved and mention the filename and location.
- For data exploration without visualization, use the `python_data_exploration_tool`.
- Explain your steps and interpret results from both tools.
- If either tool returns an error, explain it and correct the code.
- For general questions not requiring code execution, answer directly.
"""

prompt = ChatPromptTemplate.from_messages(
    [
        ("system", SYSTEM_PROMPT),
        MessagesPlaceholder(variable_name="chat_history", optional=True), # For conversation history
        ("human", "{input}"), # User's request
        MessagesPlaceholder(variable_name="agent_scratchpad"), # Placeholder for intermediate steps (tool calls/results)
    ]
)

tools = [python_data_exploration_tool,python_plot_tool_function]

agent = create_tool_calling_agent(llm=model, tools=tools, prompt=prompt)

visualization_agent_executor = AgentExecutor(
    agent=agent,
    tools=tools,
    verbose=True,
    handle_parsing_errors=True # Added for robustness
    )

# chat_history = []
# input_prompt = "Analyze the dataset and provide insights on the columns and data types. file name cards_data.csv"

# response = agent_executor.invoke({
#     "input": input_prompt,
#     "chat_history": chat_history # Pass the current history
#     })